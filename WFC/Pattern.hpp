//
//  Pattern.hpp
//  WFC
//
//  Created by 周昊 on 2020/1/28.
//  Copyright © 2020 aiofwa. All rights reserved.
//

#ifndef Pattern_hpp
#define Pattern_hpp

#include "Vec2.hpp"
#include <iostream>
#include <vector>


class Model;

enum PatternTransformation {
    NOPE, ROT90, ROT180, ROT270
};

class Pattern;

/**
 Simple rule with a offset & a pattern.
 */
struct Overlaps {
    Overlaps(Vec2 offset) : offset(offset), patterns(std::vector<Pattern *>()) {}

    Vec2 offset;
    std::vector<Pattern *> patterns;
};

class Pattern {
public:
    Pattern() {}
    Pattern(Model *model, Vec2 size, Vec2 basePos, PatternTransformation transformation);

    void printRaw(std::ostream &ostream, bool printAgreements = true);
    char at(Vec2 pos);
    Vec2 getPatternSize();

    bool operator==(Pattern &another);
    
    /**
     agrees check whether one pattern's edge is overlappable with the other.
     */
    bool agrees(Pattern *another, Vec2 deltaPos);

    int frequency;
    
    std::vector<Overlaps> overlaps; // overlaps is generated by Model.

private:
    PatternTransformation transformation;
    Vec2 size;
    char **rawPattern;
};

#endif /* Pattern_hpp */
